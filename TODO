PRIMARY:
- set logo / name
- auto-updating binary from deploy server
- build pipeline
  - tag releases on git
  - store binary releases?

WAIT:
- refresh data after song upload/processing
  - do out of band with a websocket
  - dont block for large upload/processing times
  - push new songs, playlists, albums individually on create?
    - update the uploads page?
- cleanup/fix routes / jwt issues
- new user from users page submits new token and logs ppl out?
- add osx icon w/ osagen. launch browser if already running. (can be added later)
- logging
  - switch 
  - if production push stdout 
  - https://www.goinggo.net/2013/11/using-log-package-in-go.html

- when a new file shows up on the network look to see if node is on a VPS
  - if it's NOT a VPS then issue a command "Upload to ____ Server" random VPS
  - pay them 1 coin for the upload (equal to a download) and then when people download it
  - if mustic isn't played or replicated after X time then remove it

- Fuck it central server should just be postgres
  - going to have to do a lot of manipulation/importing from musicbrainz/spotify/etc
  - search can stil be replicated with riot eventually, use postgres fulltext to start
  - use basic postgres replication for fallback
  - put a cheap reverse proxy VPS in front of the core servers

  - DONT WORRY ABOUT METADATA EDITING. Just scrape existing official sources imdb to spotify.

  - offer a "COLLECTION" pubkey service thats very low featured but built-in

  - "Join the Swarm?" after creating a new account
    - We will connect with other nodes to discover and download media
    - Encrypted swarm
    - We WILL share your files
    - [ ] I understand and will not upload or share files without permission. [ JOIN ]

- All news should be announced through the software? Solid dashboard for updated.
- Communicate once a week
- Push desktop notifications "You were awarded 33 credits."
- Award people early on with tokens for exactly what u need. 

- Search/import plugins for (both music and playlists)
  - spotify
  - soundcloud
  - google music/songza
  - bandcamp
  - youtube


Absolute Focus On
1. Making product work
2. Economic incentive... have to motivate people to run servers
    - initialize the coin ASAP
3. Must be able to replicate
4. Don't get overly obsessed about detailed features and cleaning up all meta data
    - it's okay for coin and meta to be semi-centralized?
    - just remove spam or flag it as "Download Only" and move on
    - 


NICE TO HAVES:
- update/push into vue song array after upload.. generalized websocket?
- fix upload hover el bug

- collections/library
  - on sync upload an array of file and playlist protobufs to meetava.ai
  - on search hit grpc service http://meetava.co/Search
  - if you hit "Download"
    - copy protobuf to local collection
    - add to download queue
    - server provides array of IP addresses that have that file? stun?

  - have a separate badger DB for collections? or just a key-prefix?

- Welcome/Signup page
  - Replication should be built into product? not for alpha
  - Inside app have an "Upgrade" reminder
    - Costs $10 USD/mo
    - Run your own server/accessible anywhere
    - Auto-updated with new features
    - Using this digitial ocean front company OR manual install w/ curl


STRETCH GOALS:
  - Divide up content based on logged in user
  - Setup central server getbonfire.com
  - Push all node file data to getinka.com/files grpc
    - Have server be notified when online? Hold open an https connection.
    - Have to have active https pipe to be considered online
  - Create new tab "Collections (beta)"
    - have it ajax with JWT into getinka.com endpoint
    - return list of all matching "files" ... use JWT/grpc for all intra server communication
    - include ip address/zero tier address in the index
      - it just grpc's into that node and say "play"
      - cross site so you can stream right from that node to your local browser
      - how about nodes that are behind firewalls?

  - riot/bleeve

  - auto-join most popular library (survey 8-10 nodes)


VERY LOW PRIORITY
- delayed import M3U to grab missing track lengths, artist, and album... position/track number?
- Use the audio checksum feature of dhowden/tag to ignore ID3 tags...
- on local installs be able to right-click a file and "Show in Finder/Explorer"
  - then use syscall to open the local file/folder ~/AVA/JohnDoe/


https://github.com/kardianos/service
https://github.com/mh-cbon/go-msi
https://github.com/murlokswarm/macpack
https://github.com/Xeoncross/macappshell
https://github.com/decred/decred-release

https://github.com/sanbornm/go-selfupdate
https://github.com/jpillora/overseer
https://github.com/getlantern/autoupdate
https://github.com/mitchellh/go-homedir

https://github.com/keroserene/go-webrtc
https://github.com/pixelbender/go-stun
https://github.com/ccding/go-stun
https://bbengfort.github.io/programmer/2017/03/03/secure-grpc.html
https://github.com/square/certstrap

https://github.com/lextoumbourou/goodhosts
https://github.com/jaytaylor/go-hostsfile

https://github.com/Sioro-Neoku/go-peerflix

branding
https://www.youtube.com/watch?v=HG8tqEUTlvs

=======
https://cdn0.iconfinder.com/data/icons/developer-line-2/512/sharpness-512.png
https://www.iconfinder.com/icons/220712/clean_clear_diamond_diamonds_gem_hard_hardness_opacity_precious_pyramid_sharp_sharpness_transparent_icon

inka
ark
vessel
yacht
yat
lifeboat
altitude
reflect
lumen
refuge
haven
ark
hype
alt
alter
mod
melody
amplify
be.chancetherapper.com
rise
flavor
alpha
magnify
mixtape.im
mixtape.is
mixtape.la
mixtape.to
enjoy.chancetherapper.com
into.chancetherapper.com
bonfire.chancetherapper.com
bonfire.is
bonfire.club
outjoy
forpeace
BONFIRE
MIXTAPE
BLAZE

/chano
getmixtape / for chano

principles
- put the code under a github. don't have ANY commentary tied to code ownership
- make advertising site disconnected

GLOBAL SEARCH
- use autocomplete for items in local library
- global search on enter


-------------------------------

- If file is in "Applications" folder then run it as a service




https://github.com/desertbit/glue