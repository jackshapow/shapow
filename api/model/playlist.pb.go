// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: playlist.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PlaylistType int32

const (
	PlaylistType_Artist PlaylistType = 0
	PlaylistType_Album  PlaylistType = 1
)

var PlaylistType_name = map[int32]string{
	0: "Artist",
	1: "Album",
}
var PlaylistType_value = map[string]int32{
	"Artist": 0,
	"Album":  1,
}

func (x PlaylistType) String() string {
	return proto.EnumName(PlaylistType_name, int32(x))
}
func (PlaylistType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPlaylist, []int{0} }

type Playlist struct {
	Id            string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          PlaylistType `protobuf:"varint,3,opt,name=type,proto3,enum=model.PlaylistType" json:"type,omitempty"`
	ParentId      string       `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"artist_id,omitempty"`
	ImageId       string       `protobuf:"bytes,5,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Cover         string       `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty"`
	IsCompilation bool         `protobuf:"varint,7,opt,name=is_compilation,json=isCompilation,proto3" json:"is_compilation,omitempty"`
	CreatedAt     string       `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Playlist) Reset()                    { *m = Playlist{} }
func (m *Playlist) String() string            { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()               {}
func (*Playlist) Descriptor() ([]byte, []int) { return fileDescriptorPlaylist, []int{0} }

func (m *Playlist) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Playlist) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Playlist) GetType() PlaylistType {
	if m != nil {
		return m.Type
	}
	return PlaylistType_Artist
}

func (m *Playlist) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Playlist) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *Playlist) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Playlist) GetIsCompilation() bool {
	if m != nil {
		return m.IsCompilation
	}
	return false
}

func (m *Playlist) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*Playlist)(nil), "model.Playlist")
	proto.RegisterEnum("model.PlaylistType", PlaylistType_name, PlaylistType_value)
}
func (m *Playlist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Playlist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlaylist(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlaylist(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPlaylist(dAtA, i, uint64(m.Type))
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlaylist(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.ImageId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPlaylist(dAtA, i, uint64(len(m.ImageId)))
		i += copy(dAtA[i:], m.ImageId)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPlaylist(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.IsCompilation {
		dAtA[i] = 0x38
		i++
		if m.IsCompilation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPlaylist(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	return i, nil
}

func encodeFixed64Playlist(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Playlist(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPlaylist(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Playlist) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPlaylist(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlaylist(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPlaylist(uint64(m.Type))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovPlaylist(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovPlaylist(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovPlaylist(uint64(l))
	}
	if m.IsCompilation {
		n += 2
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovPlaylist(uint64(l))
	}
	return n
}

func sovPlaylist(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPlaylist(x uint64) (n int) {
	return sovPlaylist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Playlist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaylist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Playlist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Playlist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaylist
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaylist
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PlaylistType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaylist
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaylist
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaylist
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompilation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompilation = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaylist
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlaylist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlaylist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlaylist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlaylist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaylist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPlaylist
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlaylist
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlaylist(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlaylist = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlaylist   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("playlist.proto", fileDescriptorPlaylist) }

var fileDescriptorPlaylist = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4a, 0xec, 0x40,
	0x10, 0x86, 0xa7, 0xf3, 0x92, 0x4c, 0x52, 0x3c, 0x43, 0x28, 0x5d, 0xb4, 0x88, 0x21, 0x08, 0x83,
	0xc1, 0x45, 0x16, 0x7a, 0x82, 0xe8, 0x6a, 0x76, 0x12, 0xdc, 0x87, 0x9e, 0x74, 0x23, 0x0d, 0x49,
	0xba, 0x49, 0x5a, 0x21, 0x37, 0xf1, 0x48, 0x2e, 0x3d, 0x82, 0xc4, 0xa5, 0x97, 0x10, 0x6b, 0x46,
	0x74, 0x57, 0xff, 0xf7, 0x17, 0x1f, 0x45, 0x41, 0x62, 0x3b, 0x31, 0x77, 0x7a, 0x72, 0xa5, 0x1d,
	0x8d, 0x33, 0x18, 0xf4, 0x46, 0xaa, 0xee, 0xe2, 0x93, 0x41, 0x74, 0x7f, 0x68, 0x30, 0x01, 0x4f,
	0x4b, 0xce, 0x72, 0x56, 0xc4, 0xb5, 0xa7, 0x25, 0x22, 0xf8, 0x83, 0xe8, 0x15, 0xf7, 0x88, 0xd0,
	0x8c, 0x97, 0xe0, 0xbb, 0xd9, 0x2a, 0xfe, 0x2f, 0x67, 0x45, 0x72, 0x7d, 0x5c, 0x92, 0xa6, 0xfc,
	0x51, 0x3c, 0xcc, 0x56, 0xd5, 0xb4, 0x80, 0x67, 0x10, 0x5b, 0x31, 0xaa, 0xc1, 0x35, 0x5a, 0x72,
	0x9f, 0x0c, 0xd1, 0x1e, 0x6c, 0x25, 0x9e, 0x42, 0xa4, 0x7b, 0xf1, 0xa8, 0xbe, 0xbb, 0x80, 0xba,
	0x35, 0xe5, 0xad, 0xc4, 0x13, 0x08, 0x5a, 0xf3, 0xac, 0x46, 0x1e, 0x12, 0xdf, 0x07, 0xdc, 0x40,
	0xa2, 0xa7, 0xa6, 0x35, 0xbd, 0xd5, 0x9d, 0x70, 0xda, 0x0c, 0x7c, 0x9d, 0xb3, 0x22, 0xaa, 0x8f,
	0xf4, 0x74, 0xf7, 0x0b, 0xf1, 0x1c, 0xa0, 0x1d, 0x95, 0x70, 0x4a, 0x36, 0xc2, 0xf1, 0x88, 0x0c,
	0xf1, 0x81, 0x54, 0xee, 0x6a, 0x03, 0xff, 0xff, 0x5e, 0x8a, 0x00, 0x61, 0x35, 0x3a, 0x3d, 0xb9,
	0x74, 0x85, 0x31, 0x04, 0x55, 0xb7, 0x7b, 0xea, 0x53, 0x76, 0x9b, 0xbe, 0x2e, 0x19, 0x7b, 0x5b,
	0x32, 0xf6, 0xbe, 0x64, 0xec, 0xe5, 0x23, 0x5b, 0xed, 0x42, 0x7a, 0xda, 0xcd, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x47, 0xff, 0x8e, 0x8c, 0x46, 0x01, 0x00, 0x00,
}
